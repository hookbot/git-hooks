#!/usr/bin/env perl

=pod

=head1 NAME

git-deploy - Client for push notification deployment

=head1 DESCRIPTION

git-deploy runs as a git client daemon
to pull the changes from the git server
instantly after a push is triggered.

=head1 SYNOPSIS

  git deploy
    [ { --chdir | -C } <dir> ]
    [ --build <command> ]
    [ --fix-nasty ]
    [ --background ]
    [ --max-delay <seconds> ]
    [ <branch> ]

=head2 branch

If a <branch> is specified, then it will update to that branch.
By default, the current branch is used.

  Example: git deploy master

=head2 chdir

Jump to <dir> prior to running "git pull".
By default, the current directory is used.

  Example: git deploy --chdir ~/projectx

  --OR--

  Example: git deploy -C ~/projectx

=head2 build

The --build argument is any command you want to execute
after any files are pulled or updated from git.
By default, no command is run.

  Example: git deploy --build='make -C src/.'

=head2 fix-nasty

The --fix-nasty argument will automatically remove the offending
SSH host entry for the git server from known_hosts. Only use this
flag if you've changed the SSH server key on the git server host.
By default, this option is disabled for better security.

  Example: git deploy --fix-nasty

=head2 background

The --background option will cause the deploy process to detach
from its invoker and run in the background.
This is useful when invoked from a cron
since there is nobody around to see the output anyways.
By default, this option is disabled so runs in the foreground.

  Example: echo '7 * * * * git deploy --chdir ~/projectz --background' | crontab -

=head2 max-delay

The --max-delay specifies the maximum number of seconds to wait
for each push notification.
This is useful when you want to force pull updates from commandline
without hanging the console until the next git push.
By default, max-delay is 7200 seconds (or 2 hours).

  Example: git deploy --max-delay 10

=head1 INSTALL

As super user:

  [root@deploy-host ~]# wget -N -P /usr/bin https://raw.githubusercontent.com/hookbot/git-server/master/git-deploy
  [root@deploy-host ~]# chmod 755 /usr/bin/git-deploy
  [root@deploy-host ~]#

As deploy user:

  [puller@deploy-host projectz]$ git deploy master
  [puller@deploy-host projectz]$ echo '0 * * * * cd ~/projectz && git deploy >/dev/null 2>/dev/null' | crontab -
  [puller@deploy-host projectz]$

=head1 AUTHOR

Rob Brown <bbb@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2015-2024 by Rob Brown <bbb@cpan.org>

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut

use strict;
use Cwd qw(getcwd);
use FindBin qw($Script $Bin);
use Getopt::Long qw(GetOptions);

our $VERSION = "0.018";

my @invoked = ($0, @ARGV);
my $cwd = getcwd();
my $build = undef;
my $chdir = undef;
my $fix_nasty = undef;
my $background = undef;
my $maxpatience = undef;
GetOptions
    "build:s" => \$build,
    "chdir|C:s" => \$chdir,
    "fix-nasty" => \$fix_nasty,
    "background" => \$background,
    "max-delay:i" => \$maxpatience,
    or exec perldoc => $0;

sub run_how_cmd {
    my $keep = shift;
    my @cmd = @_;
    if (my $pid = open my $fh_out, "-|") {
        # Parent process waiting for kid to say something
        my $output = join "", <$fh_out>;
        waitpid $pid, 0;
        my $exit_status = $?;
        close $fh_out;
        $? = $exit_status;
        return $output;
    }
    # Child process
    if ($keep) {
        open STDERR, ">&STDOUT";
    }
    else {
        open STDERR, ">", "/dev/null";
    }
    exec @cmd or die "$cmd[0]: Failed to spawn? $!\n";
}

sub run_output_ignore_err {
    return run_how_cmd 0, @_;
}

sub run_output_include_err {
    return run_how_cmd 1, @_;
}

sub rebuild {
    if (defined $build) {
        $0 = "$Script - Running build hook ...";
        print run_output_include_err $build;
    }
}

chdir $chdir if $chdir;

my $branch = shift || eval {
    my $scan = run_output_ignore_err qw(git branch -a);
    return $1 if $scan =~ m{^\* ([\w/\-]+)}m;
    if ($scan =~ m{^\* .*detached at (\w+)}m) {
        $scan = run_output_ignore_err("git", "branch", "-a", "--contains", $1).$scan;
    }
    return $1 if $scan =~ m{^\s+([\w/]+)}m;
} or die localtime().": [$$] Unable to determine which branch to deploy.\n";

umask 0002;
$0 = "$Script - Initial checkout";
run_output_ignore_err "git", "checkout", $branch;
sleep 1;
rebuild;
if ($background) {
    exit if fork;
    require POSIX;
    POSIX::setsid();
    close STDIN;
    close STDOUT;
    close STDERR;
}

if ($maxpatience) {
    $ENV{GIT_SSH_COMMAND} = "ssh -o SendEnv=XMODIFIERS";
    $ENV{XMODIFIERS} = "deploy_patience=$maxpatience";
}

while (1) {
    $0 = "$Script - $cwd: Waiting for push notification ...";
    my $update = "";
    $update .= run_output_include_err qw(git fetch);
    $update .= run_output_include_err "git", "checkout", $branch;
    $update .= run_output_include_err "git", "rebase", "origin/$branch";
    $0 = "$Script - Scanning updates";
    $update .= run_output_include_err "git", "rebase", "--abort" if $update =~ /fix conflicts|git rebase.*--continue|you need to resolve your|stop rebasing/;
    if (-M "$Bin/$Script" < 0) {
        # Myself update detected so need to respawn
        warn localtime().": [$$] Auto-update $Script respawning ...\n";
        sleep 1;
        exec @invoked or die localtime().": [$$] $Bin/$Script: RESPAWN FATAL CRASH\n";
    }
    if ($update =~ /POSSIBLE.*SOMEONE.*DOING.*NASTY/) {
        warn $update;
        if ($fix_nasty && $update =~ /host key for (\S+) has changed and you have requested strict checking/) {
            my $nasty = $1;
            warn "--fix-nasty: $nasty: Clearing known_hosts ...\n";
            my $wipe = run_output_include_err "ssh-keygen", "-R", $nasty;
            if (!$?) {
                $wipe =~ s/\s*$/\n/;
                warn $wipe;
                require Socket;
                if (my $ip = Socket::inet_ntoa(Socket::inet_aton($nasty))) {
                    $nasty .= ",$ip";
                }
                if (my $real_ssh_server_key = run_output_ignore_err "ssh-keyscan", "-t", "rsa,dsa", $nasty) {
                    open my $fh_known, ">>", "$ENV{HOME}/.ssh/known_hosts";
                    print $real_ssh_server_key;
                    close $fh_known;
                }
            }
        }
        else {
            warn "To force deploy to continue anyway, run this: $Script --fix-nasty\n";
        }
        last;
    }
    if ($update =~ /Your branch.*diverged/) {
        # Rebase can't work if there are local divergents.
        warn $update;
        warn localtime().": [$$] Detected local divergence off [$branch] so doing HARD RESET ...\n";
        my $hard = "";
        $hard .= run_output_include_err "git", "checkout", $branch;
        $hard .= run_output_include_err "git", "reset", "--hard", "origin/$branch";
        my $running = run_output_include_err qw(ps fauwwx);
        last if $running =~ /\Q$Script - $cwd\E: Waiting/;
        $0 = "$Script - $cwd: Waiting because of local divergence";
        print run_output_include_err qw(sleep 60);
    }
    elsif ($update =~ /You have unstaged changes/) {
        # Rebase can't work if there are local changes.
        # Make sure there aren't multiple pullers choking on the repo
        warn $update;
        my $running = run_output_include_err "ps", "fauwwx";
        last if $running =~ /\Q$Script - $cwd\E: Waiting/;
        my $monkey = "";
        $monkey = ": $1" if $update =~ /^M\s+(\S+)/m;
        $0 = "$Script - $cwd: Waiting because of local modifications$monkey";
        print run_output_ignore_err qw(sleep 60);
    }
    elsif ($update =~ m{fatal: Unable to create '(.+?)': File exists.}) {
        # Updates cannot work while lock file exists
        warn $update;
        my $broken_lock = $1;
        $0 = "$Script - Choking Locked: $broken_lock";
        my $running = run_output_ignore_err qw(ps fauwwx);
        last if $running =~ /\Q$Script - $cwd\E: Waiting/;
        if ($running !~ /git rebase/) {
            # No other conflicting git process running
            # So lock file is safe enough to be removed
            unlink $broken_lock;
        }
        else {
            print run_output_include_err qw(sleep 60);
        }
    }
    last if $update !~ /rewinding head to replay|fast-forward|but expected|Unpacking objects|Cannot rebase|ecent commit/;
    if ($update =~ /Current branch.*is up to date/) {
        $0 = "$Script - $cwd: Waiting because everything is updated ...";
        print "Everything was updated perfectly. Sleeping ...\n";
        print run_output_ignore_err qw(sleep 60);
    }
    $0 = "$Script - Update complete";
    sleep 1;
    rebuild;
}

rebuild;
