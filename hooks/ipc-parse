#!/usr/bin/perl

use warnings;
use strict;

sub crash {
    my $err_message = shift;
    my $out_message = shift // "{}";
    $out_message =~ s/\s*$/\n/;
    print $out_message;
    defined($err_message) or exit 1;
    $err_message =~ s/\s*$//;
    die "$0: $err_message\n";
}

crash("Not invoked properly from git hooks.") if !$ENV{IPC};

open my $fh, "<", "$ENV{IPC}/log.trace" or crash("$ENV{IPC}/log.trace: Unable to read IPC info file? $!");
my $log = join "", <$fh>;
close $fh;

my $ssh = $ENV{SSH_CLIENT} or crash("Only SSH supported");
my $KEY = $ENV{KEY} || "UNKNOWN";
my $ip = $ssh =~ s/^([\da-f\.:]+) //ig ? $1 : "UNKNOWN";
my $remote_port = $ssh =~ /^(\d+)\s*/i ? $1 : 0;

my $client_to_server = "";
my $server_to_client = "";
my $stderr = "";
while ($log =~ s/^[\s\d:\.\-]+?(read|write)\(([012]),\s*(.+)//m) {
    my $op = $1;
    my $fd = $2;
    my $s = $3;
    $s = $1 if $s =~ /"(.*)"/;
    $s =~ s/\\([0-7]{1,3})/eval "0$1"/eg;
    $s =~ s/\\x([0-9a-f]{2})/eval "chr 0x$1"/eg;
    $s =~ s/\\t/\t/g;
    $s =~ s/\\r/\r/g;
    $s =~ s/\\n/\n/g;
    $s =~ s/\\\\/\\/g;
    if ($op eq "read" and $fd eq "0") {
        $client_to_server .= $s;
    }
    elsif ($op eq "write" and $fd eq "1") {
        $server_to_client .= $s;
    }
    elsif ($op eq "write" and $fd eq "2") {
        $stderr .= $s;
    }
}
#warn "DEBUG: leftovers=[$log]\n";
warn "DEBUG: in=[$client_to_server]\n";
warn "DEBUG: out=[$server_to_client]\n";
warn "DEBUG: err=[$stderr]\n";

my $info = {};

$info->{key} = $KEY;
$info->{client_ip} = $ip;
$info->{client_port} = $remote_port if $remote_port;

# Example: agent=git/2.39.3.(Apple.Git-146)
$info->{client_git_version} = $1 if $client_to_server =~ m{ agent=([\w/\.\ \-\(\)]+)};
$info->{server_git_version} = $1 if $server_to_client =~ m{ agent=([\w/\.\ \-\(\)]+)};

if (eval { require JSON }) {
    print JSON::to_json($info)."\n";
    exit;
}
elsif (eval { require Data::Dumper }) {
    print Data::Dumper::Dumper($info);
    exit;
}
else {
    print qq{{"error":"Data Transport Failure"}\n};
    exit;
}
