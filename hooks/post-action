#!/usr/bin/perl

use strict;
use warnings;

my $ssh = $ENV{SSH_CLIENT} or die "Only SSH allowed\n";
my $KEY = $ENV{KEY} || "UNKNOWN";
my $ip = $ssh =~ /^([\da-f\.:]+) /i ? $1 : "UNKNOWN";

if ($ENV{IPC} and my $dir = $ENV{GIT_DIR}) {
    my $info = `$dir/hooks/ipc-parse 2>/dev/null`;
    $info =~ s/\s*$//;
    my $ref = {};
    if ($info =~ /^\s*\{/) {
        # Must be JSON
        $ref = eval {
            require JSON;
            return JSON::from_json($info);
        };
    }
    elsif ($info =~ /^\s*\$VAR1\s*=/) {
        # Must be Dumper
        my $VAR1 = undef;
        eval $info;
        $ref = $VAR1;
    }
    else {
        die localtime().": [$KEY\@$ip] git-server: Unrecognized IPC transport: $info\n";
    }
    my $config = `git config --list 2>/dev/null`;

    # Check for any webhook directives
    my $webhook = {};
    while ($config =~ s/^webhook\.(.*)\.(\w+)=(.*)/\n/m) {
        my $url = $1;
        my $directive = $2;
        my $val = $3;
        $webhook->{$url}->{$directive} = $val;
    }
    foreach my $url (keys %$webhook) {
        my $cfg = $webhook->{$url};
        # Default settings
        $cfg = {
            method => "post",
            transport => "json",
            %$cfg,
        };
        if ($cfg->{method} =~ /^post$/i) {
            if ($cfg->{transport} =~ /^json$/i) {
                die localtime().": [$KEY\@$ip] git-server: Unable to read JSON input:\n$info\n" unless $info =~ /^\s*\{/;
                require IPC::Open3;
                my $pid = IPC::Open3::open3(my $in, my $out, my $err, curl => -k => -s => -X => POST => '--data-binary' => '@-' => '-HContent-type: application/json' => $url);
                print $in $info;
                print $in "\n";
                close $in;
                while (<$out>) {
                    chomp;
                    warn localtime().": [$KEY\@$ip] webhook out: $_\n";
                }
                close $out;
                while (<$err>) {
                    chomp;
                    warn localtime().": [$KEY\@$ip] webhook err: $_\n";
                }
                close $err;
                waitpid($pid, 0);
                my $curl_exit_status = $? >> 8;
                warn localtime().": [$KEY\@$ip] webhook done: exit=$curl_exit_status\n";
            }
        }
        use Data::Dumper;
        warn Dumper {
            info => $ref,
            WEBHOOK =>{
                url => $url,
                cfg => $cfg,
            },
        };
    }
}

exit;
