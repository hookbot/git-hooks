#!/usr/bin/perl

use strict;
use warnings;

my $user = $ENV{KEY} or die "ENV KEY must be set to make changes.\n";
my $r = "\x01"; # enable bit 2^(fileno STDIN)
die "$0: Commandline Execution Worked!\n" if !select $r, undef, undef, 0.2;
my $push_info = <STDIN>;
my ($old,$new,$ref) = $push_info =~ m{^(\w+) (\w+) ([\w/\.\-]+)} or die "$0: Invalid syntax!\n";
if ($ref) {
    my $ip = $ENV{SSH_CLIENT} =~ /^([\da-f\.:]+) /i ? $1 : "UNKNOWN";
    my $branch = ($ref =~ m{^refs/(?:heads|tags)/(.+)} || $ref =~ m{.*/([^/]+)}) ? $1 : $ref;
    my $type = ($ref =~ m{^refs/tags/}) ? "tag" : "branch";
    my $conf = `git config --list`;
    my $allowed_users = {};
    while ($conf =~ s/^restrictedbranch\.(.+)\.pushers=(.+)$//m) {
        my $sniff = $1;
        my $keys = $2;
        my $regex = $sniff =~ m{^/(.+)/$} ? qr{$1} : eval {
            my $wild = $sniff;
            $wild =~ s/\./\\./g;
            $wild =~ s/\*/.+/g;
            return qr{^$wild$};
        } or die localtime().": [$user] git-server: [$ip] Unimplemented restrictedbranch syntax? [$sniff]\n";
        if ($branch =~ $regex) {
            foreach my $key (split /,/, $keys) {
                $allowed_users->{$key} = $sniff;
            }
        }
    }
    if (%$allowed_users and !$allowed_users->{$user}) {
        die localtime().": [$user] git-server: [$ip] Failed to modify restricted $type [$branch]\n";
    }
    my $rewrite_users = {};
    while ($conf =~ s/^protectedbranch\.(.+)\.forcers=(.+)$//m) {
        my $sniff = $1;
        my $keys = $2;
        my $regex = $sniff =~ m{^/(.+)/$} ? qr{$1} : eval {
            my $wild = $sniff;
            $wild =~ s/\./\\./g;
            $wild =~ s/\*/.+/g;
            return qr{^$wild$};
        } or die localtime().": [$user] git-server: [$ip] Unimplemented protectedbranch syntax? [$sniff]\n";
        if ($branch =~ $regex) {
            foreach my $key (split /,/, $keys) {
                $rewrite_users->{$key} = $sniff;
            }
        }
    }
    my $can_change_history = !%$rewrite_users || $rewrite_users->{$user};
    if ($old =~ /^0+$/) {
        if ($can_change_history) {
            warn localtime().": [$user] git-server: [$ip] Creating new $type [$branch]\n";
        }
        else {
            die localtime().": [$user] git-server: [$ip] Unable to create protected $type [$branch]\n";
        }
    }
    elsif ($new =~ /^0+$/) {
        if ($can_change_history) {
            warn localtime().": [$user] git-server: [$ip] Modifying git history by deleting $type [$branch]!\n";
        }
        else {
            die localtime().": [$user] git-server: [$ip] You cannot delete protected $type [$branch]. Do not run 'git push --delete origin $branch'.\n";
        }
    }
    elsif ($type eq "tag") {
        if ($can_change_history) {
            die localtime().": [$user] git-server: [$ip] Moving $type [$branch] form $old to $new\n";
        }
        else {
            die localtime().": [$user] git-server: [$ip] You cannot move protected tag [$branch]. Do not run 'git push --force origin $branch'\n";
        }
    }
    elsif (`git log $new -- 2>&1 | grep '^commit $old'`) {
        #warn localtime().": [$user] git-server: [$ip] Pushing $new changes to $type [$branch] tip without --force\n";
    }
    else {
        die localtime().": [$user] git-server: [$ip] Don't 'git push --force' because you can't rewrite git history for protected $type [$branch]. Try 'git pull --rebase' or 'git pull' to clean up your local repo.\n";
    }
}
