#!/usr/bin/perl

use strict;
use warnings;

my $KEY = $ENV{KEY} or die "ENV KEY must be set to make changes.\n";
my $r = "\x01"; # enable bit 2^(fileno STDIN)
die "$0: Commandline Execution Worked!\n" if !select $r, undef, undef, 0.2;
my $push_info = <STDIN>;
my ($old,$new,$ref) = $push_info =~ m{^(\w+) (\w+) ([\w/\.\-]+)} or die "$0: Invalid syntax!\n";
if ($ref) {
    my $ip = $ENV{SSH_CLIENT} =~ /^([\da-f\.:]+) /i ? $1 : "UNKNOWN";
    my $branch = ($ref =~ m{^refs/(?:heads|tags)/(.+)} || $ref =~ m{.*/([^/]+)}) ? $1 : $ref;
    my $type = ($ref =~ m{^refs/tags/}) ? "tag" : "branch";
    my $conf = `git config --list`;
    my $allowed_users = {};
    while ($conf =~ s/^restrictedbranch\.(.+)\.pushers=(.+)$//m) {
        my $sniff = $1;
        my $keys = $2;
        my $regex = $sniff =~ m{^/(.+)/$} ? qr{$1} : eval {
            my $wild = $sniff;
            $wild =~ s/\\/\\\\/g;
            $wild =~ s/\./\\./g;
            $wild =~ s/\*/.+/g;
            return qr{^$wild$};
        } or die localtime().": [$KEY\@$ip] git-server: Unimplemented [restrictedbranch.pushers] syntax? [$sniff]=>[$keys]\n";
        if ($branch =~ $regex) {
            foreach my $key (split /,/, $keys) {
                $allowed_users->{$key} = $sniff;
            }
        }
    }
    if (%$allowed_users and !$allowed_users->{$KEY}) {
        die localtime().": [$KEY\@$ip] git-server: Missing [restrictedbranch.pushers] permission! Failed to modify restricted $type [$branch].\n";
    }
    my $rewrite_users = {};
    while ($conf =~ s/^restrictedbranch\.(.+)\.forcers=(.+)$//m) {
        my $sniff = $1;
        my $keys = $2;
        my $regex = $sniff =~ m{^/(.+)/$} ? qr{$1} : eval {
            my $wild = $sniff;
            $wild =~ s/\\/\\\\/g;
            $wild =~ s/\./\\./g;
            $wild =~ s/\*/.+/g;
            return qr{^$wild$};
        } or die localtime().": [$KEY\@$ip] git-server: Unimplemented [restrictedbranchbranch.forcers] syntax? [$sniff]=>[$keys]\n";
        if ($branch =~ $regex) {
            foreach my $key (split /,/, $keys) {
                $rewrite_users->{$key} = $sniff;
            }
        }
    }
    my $can_change_history = !%$rewrite_users || $rewrite_users->{$KEY};
    if ($old =~ /^0+$/) {
        if ($can_change_history) {
            warn localtime().": [$KEY\@$ip] git-server: Creating new $type [$branch]\n";
        }
        else {
            warn localtime().": [$KEY\@$ip] git-server: Creating unremovable $type [$branch]. (You will not be able to delete it without [restrictedbranch.forcers] permission.)\n";
        }
    }
    elsif ($new =~ /^0+$/) {
        if ($can_change_history) {
            if ($type eq "tag") {
                warn localtime().": [$KEY\@$ip] git-server: Deleting tag $type [$branch] from [$old]\n";
            }
            else {
                warn localtime().": [$KEY\@$ip] git-server: DANGER! Pruning entire branch [$branch] from [$old]!\n";
            }
        }
        else {
            if ($type eq "tag") {
                die localtime().": [$KEY\@$ip] git-server: Missing [restrictedbranch.forcers] permission! Unable to remove restricted $type [$branch]. Do not run 'git push --delete origin $branch'. Remaining at $old\n";
            }
            else {
                die localtime().": [$KEY\@$ip] git-server: Missing [restrictedbranch.forcers] permission! Unable to prune git history on restricted $type [$branch]. Do not run 'git push --delete origin $branch'. Remaining at $old\n";
            }
        }
    }
    elsif ($type eq "tag") {
        if ($can_change_history) {
            warn localtime().": [$KEY\@$ip] git-server: FORCE moving existing $type [$branch] from $old to $new\n";
        }
        else {
            die localtime().": [$KEY\@$ip] git-server: Missing [restrictedbranch.forcers] permission! You cannot move restricted tag [$branch]. Do not run 'git push --force origin $branch'\n";
        }
    }
    elsif (`git log $new -- 2>&1 | grep '^commit $old'`) {
        #warn localtime().": [$KEY\@$ip] git-server: Pushing $new changes to $type [$branch] tip without --force\n";
    }
    else {
        # MUST HAVE USED: git push --force
        if ($can_change_history) {
            my $tip_hashes = `git show-ref 2>&1`;
            $tip_hashes =~ s{ refs/\w+/}{ }g;
            my $matching = {};
            my $scan_hashes = $tip_hashes;
            while ($scan_hashes =~ s{^\Q$old\E\s+(\S+)}{}m) {
                $matching->{$1} = $old;
            }
            if (my $found = delete $matching->{$branch}) {
                if ($found ne $old) {
                    die localtime().": [$KEY\@$ip] git-server: Server branch [$branch] unexpectedly shows $found instead of $old?\n";
                }
                if (!keys %$matching) {
                    my (undef,undef,undef,$mday,$mon,$year) = gmtime;
                    my $suggest = sprintf "%s-BAK_%04d-%02d-%02d", $branch, $year+1900, $mon+1, $mday;
                    die localtime().": [$KEY\@$ip] git-server: Refusing to lose $type $branch history upto $old without a backup branch or tag to hold it. Try 'git tag $suggest $old ; git push origin $suggest' to create a branch on the old tip. If you really wish to lose these changes, then run 'git push --delete origin $suggest' after the branch $branch is pushed.\n";
                }
            }
            else {
                die localtime().": [$KEY\@$ip] git-server: SERVER BUG! Unable to find $type [$branch]\n$tip_hashes\nOperation 'push --force' failed!\n";
            }
            warn localtime().": [$KEY\@$ip] git-server: Rewriting git history for $type [$branch] using 'push --force' since found backup ref(s) (".join(" ",sort keys %$matching).") still on old tip [$old].\n";
        }
        else {
            die localtime().": [$KEY\@$ip] git-server: Missing [restrictedbranch.forcers] permission! Failed to rewrite git history for restricted $type [$branch]. Do not run 'git push --force'. Try 'git pull --rebase' or 'git pull' to clean up your local repo.\n";
        }
    }
}
